import * as fs from 'fs';
import * as path from 'path';

/**
 * Saves the contract addresses to a JSON file and updates the types.ts file
 * @param addresses - Object containing contract addresses
 * @param addresses.verificationManager - Address of VerificationManager contract
 * @param addresses.resumeNFT - Address of ResumeNFT contract
 */
export function saveContractAddresses(addresses: { 
  verificationManager?: string; 
  resumeNFT?: string;
  networkName?: string;
}) {
  try {
    // Get the current date and time for the timestamp
    const timestamp = new Date().toISOString();
    
    // Prepare the data to save
    const addressData = {
      ...addresses,
      deploymentTimestamp: timestamp
    };
    
    // Create the addresses directory if it doesn't exist
    const addressesDir = path.resolve(__dirname, '../../deployments');
    if (!fs.existsSync(addressesDir)) {
      fs.mkdirSync(addressesDir, { recursive: true });
    }
    
    // Save the addresses to a JSON file in the deployments directory
    const addressesPath = path.resolve(addressesDir, 'contract-addresses.json');
    fs.writeFileSync(
      addressesPath,
      JSON.stringify(addressData, null, 2)
    );
    
    console.log(`✅ Contract addresses saved to ${addressesPath}`);
    
    // Copy addresses to the app directory for frontend use
    const appAddressesDir = path.resolve(__dirname, '../../../app/lib/contracts');
    if (!fs.existsSync(appAddressesDir)) {
      fs.mkdirSync(appAddressesDir, { recursive: true });
    }
    
    const appAddressesPath = path.resolve(appAddressesDir, 'addresses.ts');
    
    // Create the content for the addresses.ts file
    const addressContent = `// Auto-generated by deployment script - DO NOT EDIT MANUALLY
import { ContractAddresses } from '../types';

export const contractAddresses: ContractAddresses = ${JSON.stringify(addressData, null, 2)};

export default contractAddresses;
`;
    
    fs.writeFileSync(appAddressesPath, addressContent);
    console.log(`✅ Contract addresses exported to frontend at ${appAddressesPath}`);
    
    return addressData;
  } catch (error) {
    console.error('Error saving contract addresses:', error);
    throw error;
  }
} 